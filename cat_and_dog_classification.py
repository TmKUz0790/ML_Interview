# -*- coding: utf-8 -*-
"""cat_and_dog_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SOZsoqGdvuAPfZ9fdR1Sjp-PsQhkGjrk
"""

!pip install kaggle

#for connnect kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#implement the data from kaggle
!kaggle competitions download -c dogs-vs-cats

!ls

#Unzip the data
from zipfile import ZipFile
dataset = 'dogs-vs-cats.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print("done")

#Unzip the data
from zipfile import ZipFile
dataset = 'train.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print("done")

import os
path,dirs, files = next(os.walk('/content/train'))
file_count = len(files)
print(file_count)

file_names = os.listdir('/content/train')
print(file_names)

"""Libraries"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

"""Displaying images

"""

img = mpimg.imread('/content/train/cat.5316.jpg')
imgplt = plt.imshow(img)
plt.show()

file_names = os.listdir('/content/train')
d_counter = 0
c_counter = 0

for image in file_names:
  name = image[0:3]
  if name =='cat':
    c_counter +=1
  else:
    d_counter +=1


print(f"Number of cat files: {c_counter} , Number of dof files: {d_counter}")

os.mkdir('/content/resized images')

original_images = '/content/train/'
resized_images = '/content/resized images/'


for i in range(200):
  filename = os.listdir(original_images)[i]
  image_path = original_images+filename

  img = Image.open(image_path)
  img = img.resize((224,224))
  img = img.convert('RGB')

  newImagepath = resized_images+ filename
  img.save(newImagepath)

#For labels
filenames = os.listdir('/content/resized images/')


labels = []

for i in range(200):
  file_name = filenames[i]
  label = file_name[0:3]

  if label =='dog':
    labels.append(1)

  else:
    labels.append(0)

print(labels[0:5])
print(len(labels))
print(filenames[0:5])

values,counts = np.unique(labels,return_counts = True)
print(values)
print(counts)

import cv2
import glob

image_directory = '/content/resized images/'
image_extension = ['png','jpg']

files = []
[files.extend(glob.glob(image_directory + '*.' + e)) for e in image_extension]
dog_cat_images = np.asarray([cv2.imread(file) for  file in files])

print(dog_cat_images)

type(dog_cat_images)

print(dog_cat_images.shape)

X = dog_cat_images
Y = np.asarray(labels)

X_train, X_test, Y_train,Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 2)

print(X.shape,X_train.shape,X_test.shape)

X_train_scaled = X_train/255
X_test_scaled = X_test/255

print(X_train_scaled)

import tensorflow as tf
import tensorflow_hub as hub

mobilnet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'
pretrained_model = hub.KerasLayer (mobilnet_model, input_shape= (224, 224,3), trainable=False)



num_of_classes = 2
model = tf.keras.Sequential([
    pretrained_model,
    tf.keras.layers.Dense(num_of_classes)
])
model.summary



model. compile(

 optimizer = 'adam',
 loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
 metrics = ['acc']
)

model. fit (X_train_scaled, Y_train, epochs=5)



input_image_path = input('Path of the image to be predicted: ')
input_image = cv2.imread (input_image_path)
cv2_imshow(input_image)
input_image_resize = cv2.resize (input_image, (224,224))
input_image_scaled = input_image_resize/255
image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])
input_prediction = model.predict(image_reshaped)
input_pred_label = np.argmax(input_prediction)
if input_pred_label == 0:
 print('This is  a Cat')
elif input_pred_label== 1:
 print ('The is a Dog')
else :
  print('Unknown photo')

from tensorflow.keras.models import load_model, save_model

model.save('cat_and_dog_classification.h5')

from google.colab import files

files.download('cat_and_dog_classification.h5')